{"version":3,"sources":["components/Option.tsx","components/Options.tsx","components/Question.tsx","components/Questions.tsx","components/Header.tsx","pages/Result/Result.tsx","pages/Quiz/Quiz.tsx","components/TvShowCard.tsx","pages/Home/Home.tsx","components/NavBar.tsx","pages/App/App.tsx","serviceWorker.ts","store/quizzes.api.middleware.ts","localStorage/localStorage.ts","store/configureStore.tsx","index.tsx","assets/got.jpg","assets/friends.jpg","assets/sv.png"],"names":["useStyles","makeStyles","optionText","fontWeight","card","minWidth","connect","state","currentQuestion","quiz","lastQuestion","dispatch","advanceQuestion","type","payload","updateTotalValue","value","props","classes","react_default","a","createElement","Card","className","onClick","CardActionArea","CardContent","text","root","flexGrow","option","textAlign","options","Object","toConsumableArray","questions","Grid","container","direction","justify","alignItems","map","index","key","item","md","components_Option","maxWidth","margin","media","height","paddingTop","position","content","overlay","top","width","overlayQuestion","color","backgroundColor","fontSize","progressBar","paddingBottom","questionProgress","LinearProgress","variant","CardHeader","action","concat","CardMedia","image","imgSrc","title","question","components_Options","theme","progress","spacing","getOwnPropertyNames","length","setLastQuestion","useEffect","CircularProgress","components_Question","quizType","toUpperCase","button","result","results","totalValue","i","lowValue","highValue","objectSpread","onRetakeClick","Typography","component","description","Button","size","quizStart","quizEnd","onStartClick","updateQuizType","updateNavTab","resetQuizData","path","window","location","pathname","quizTypeByPath","getQuizTypeByPath","navTabByPath","getNavTabByPath","components_Header","pages_Result_Result","components_Questions","setImgSrc","src","TvShowCard","_useState","useState","_useState2","slicedToArray","redirect","setRedirect","react_router","to","tvShow","getRoutePath","gotLogo","friendsLogo","svLogo","getImgSrc","getFamousShowQuote","gutterBottom","getDescription","CardActions","open","getWikiUrl","xs","components_TvShowCard","icon","marginTop","marginLeft","marginRight","cursor","currentNavTab","navTab","themeType","onQuizClick","onIconClick","newThemeType","console","log","Paper","Tabs","indicatorColor","textColor","Tab","label","Link","Tooltip","InvertColors_default","exact","Home","Quiz","ThemeProvider","createMuiTheme","palette","primary","main","setTheme","CssBaseline","components_NavBar","Boolean","hostname","match","fetchQuiz","fetch","then","res","json","data","catch","e","error","quizzesMdl","_ref","next","loadState","serializedState","localStorage","getItem","JSON","parse","err","navTabInitState","navTabReducer","arguments","undefined","quizInitState","quizReducer","valueInitState","valueReducer","AppThemeTypeInitState","themeTypeReducer","store","persistedState","enhancers","applyMiddleware","apply","composedEnhancers","composeWithDevTools","rootReducer","combineReducers","createStore","configureStore","subscribe","throttle","stringify","setItem","_unused","saveState","getState","indexOf","ReactDOM","render","es","react_router_dom","pages_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.820cabdd.chunk.js","sourcesContent":["import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {Dispatch} from \"redux\";\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardContent from '@material-ui/core/CardContent';\r\n\r\ninterface IProps {\r\n    text: string,\r\n    value: number,\r\n    currentQuestion: number,\r\n    lastQuestion: number,\r\n    advanceQuestion: Function,\r\n    updateTotalValue: Function\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n    optionText: {\r\n        fontWeight: 'bold'\r\n    },\r\n    card: {\r\n        minWidth: '56px',\r\n    }\r\n});\r\n\r\nconst Option: React.FC<IProps> = (props: IProps) => {\r\n\r\n    const classes = useStyles();\r\n\r\n    const onOptionClick = (value: number) => {\r\n        props.advanceQuestion(props.currentQuestion, props.lastQuestion);\r\n        props.updateTotalValue(value);\r\n    };\r\n\r\n    return (\r\n        <Card className={classes.card} onClick={() => onOptionClick(props.value)}>\r\n            <CardActionArea>\r\n                <CardContent >\r\n                    <span className={classes.optionText}>{props.text}</span>\r\n                </CardContent>\r\n            </CardActionArea>\r\n        </Card>\r\n    );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n    advanceQuestion: (currentQuestion: number, lastQuestion: number) => {\r\n        if (currentQuestion + 1 === lastQuestion) {\r\n            dispatch({type: '[QUIZ] QUIZ_END', payload: true});\r\n        } else {\r\n            dispatch({type: '[QUIZ] ADVANCE_QUESTION_NUN'});\r\n        }\r\n    },\r\n    updateTotalValue: (value: number) => {\r\n        dispatch({type: '[VALUE] UPDATE_VALUE', payload: value});\r\n    }\r\n});\r\n\r\nconst mapStateToProps = (state: any) => {\r\n    const currentQuestion = state.quiz.currentQuestion;\r\n    const lastQuestion = state.quiz.lastQuestion;\r\n    return {\r\n        currentQuestion: currentQuestion,\r\n        lastQuestion: lastQuestion\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Option);\r\n","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {IOption} from '../models/IOption';\r\nimport Option from './Option';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\n\r\ninterface IProps {\r\n    options: Array<IOption>;\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    option: {\r\n        textAlign: 'center',\r\n    }\r\n});\r\n\r\nconst Options: React.FC<IProps> = (props: IProps) => {\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Grid\r\n                container\r\n                direction=\"row\"\r\n                justify=\"space-evenly\"\r\n                alignItems=\"center\">\r\n                {props.options.map((option, index) =>\r\n                    <Grid key={index} item md={2} className={classes.option}>\r\n                        <Option\r\n                            text={option.text}\r\n                            value={option.value}\r\n                        />\r\n                    </Grid>\r\n                )}\r\n            </Grid>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: any) => {\r\n    const currentQuestion = state.quiz.currentQuestion;\r\n    const quiz = state.quiz.quiz;\r\n    const options = [...quiz.questions[currentQuestion].options];\r\n    return {\r\n        options: [...options],\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(Options);\r\n","import React from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport Options from './Options';\r\nimport {connect} from \"react-redux\";\r\n\r\ninterface IProps {\r\n    imgSrc: string,\r\n    question: string,\r\n    currentQuestion: number,\r\n    lastQuestion: number,\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n    card: {\r\n        maxWidth: '60%',\r\n        margin: 'auto',\r\n    },\r\n    media: {\r\n        height: 0,\r\n        paddingTop: '56.25%', // 16:9\r\n        position: 'relative',\r\n    },\r\n    content: {\r\n        paddingTop: '8px'\r\n    },\r\n    overlay: {\r\n        position: 'absolute',\r\n        top: '80%',\r\n        width: '100%',\r\n        margin: 'auto',\r\n    },\r\n    overlayQuestion: {\r\n        color: 'black',\r\n        backgroundColor: 'rgba(255,255,255, 0.5)',\r\n        fontWeight: 'bold',\r\n        fontSize: '2em'\r\n    },\r\n    progressBar: {\r\n        flexGrow: 1,\r\n        maxWidth: '60%',\r\n        paddingBottom: '8px',\r\n        margin: 'auto',\r\n    },\r\n    questionProgress: {\r\n        margin: 0,\r\n    }\r\n});\r\n\r\nconst Question: React.FC<IProps> = (props: IProps) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div>\r\n            <div className={classes.progressBar}>\r\n                <LinearProgress\r\n                    variant=\"determinate\"\r\n                    value={(100 / (props.lastQuestion - 1)) * (props.currentQuestion)}\r\n                />\r\n            </div>\r\n            <Card className={classes.card}>\r\n                <CardHeader\r\n                    action={\r\n                        <h5 className={classes.questionProgress}>\r\n                            {`${props.currentQuestion + 1}/${props.lastQuestion}`}\r\n                        </h5>}\r\n                />\r\n                <CardMedia\r\n                    className={classes.media}\r\n                    image={`img/${props.imgSrc}`}\r\n                    title=\"Question image\">\r\n                    <div className={classes.overlay}>\r\n                        <span className={classes.overlayQuestion}>\r\n                            {props.question}\r\n                        </span>\r\n                    </div>\r\n                </CardMedia>\r\n                <CardContent>\r\n                    <Options/>\r\n                </CardContent>\r\n            </Card>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: any) => {\r\n    const currentQuestion = state.quiz.currentQuestion;\r\n    const lastQuestion = state.quiz.lastQuestion;\r\n    return {\r\n        currentQuestion: currentQuestion,\r\n        lastQuestion: lastQuestion\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(Question);\r\n","import React, {useEffect} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {Dispatch} from 'redux';\r\nimport {IQuiz} from '../models/IQuiz';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Question from './Question';\r\n\r\ninterface IProps {\r\n    imgSrc: string,\r\n    question: string,\r\n    currentQuestion: number,\r\n    quiz: IQuiz,\r\n    setLastQuestion: Function,\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        maxWidth: '60%',\r\n        margin: 'auto',\r\n    },\r\n    media: {\r\n        height: 0,\r\n        paddingTop: '56.25%', // 16:9\r\n        position: 'relative',\r\n    },\r\n    content: {\r\n        paddingTop: '8px'\r\n    },\r\n    overlay: {\r\n        position: 'absolute',\r\n        top: '80%',\r\n        width: '100%',\r\n        margin: 'auto',\r\n    },\r\n    overlayQuestion: {\r\n        color: 'black',\r\n        backgroundColor: 'rgba(255,255,255, 0.5)',\r\n        fontWeight: 'bold',\r\n        fontSize: '1.5em'\r\n    },\r\n    progress: {\r\n        margin: theme.spacing(2),\r\n    }\r\n}));\r\n\r\nconst Questions: React.FC<IProps> = (props: IProps) => {\r\n\r\n    useEffect(() => {\r\n        if (Object.getOwnPropertyNames(props.quiz).length > 0) {\r\n            props.setLastQuestion(props.quiz.questions.length)\r\n        }\r\n    }, [props.quiz]);\r\n\r\n    const classes = useStyles();\r\n\r\n    if (Object.getOwnPropertyNames(props.quiz).length === 0) {\r\n        return (\r\n            <CircularProgress className={classes.progress}/>\r\n        );\r\n    }\r\n    return (\r\n        <Question\r\n            imgSrc={props.imgSrc}\r\n            question={props.question}\r\n        />\r\n    );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n    setLastQuestion: (lastQuestion: number) => {\r\n        dispatch({type: '[QUIZ] SET_LAST_QUESTION', payload: lastQuestion});\r\n    }\r\n});\r\n\r\nconst mapStateToProps = (state: any) => {\r\n    const currentQuestion = state.quiz.currentQuestion;\r\n    let question = '';\r\n    let imgSrc = '';\r\n    const quiz = state.quiz.quiz;\r\n    if (Object.getOwnPropertyNames(quiz).length !== 0) {\r\n        question = quiz.questions[currentQuestion].text;\r\n        imgSrc = quiz.questions[currentQuestion].imgSrc;\r\n    }\r\n    return {\r\n        quiz: quiz,\r\n        question: question,\r\n        imgSrc: imgSrc,\r\n        currentQuestion: currentQuestion\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Questions);\r\n","import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\ninterface IProps {\r\n    quizType: string;\r\n}\r\n\r\nconst Header: React.FC<IProps> = (props: IProps) => {\r\n    const showHeader = () => {\r\n        if (props.quizType === '') {\r\n            return null;\r\n        } else {\r\n            return (\r\n                <h1 >\r\n                    {'WHICH ' + props.quizType.toUpperCase() + ' CHARACTER ARE YOU?'}\r\n                </h1>\r\n            );\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {showHeader()}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: any) => {\r\n    const quizType = state.quiz.quizType;\r\n    return {\r\n        quizType: quizType\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(Header);","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {IResult} from \"../../models/IResult\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {Dispatch} from \"redux\";\r\n\r\ninterface IProps {\r\n    result: IResult,\r\n    onRetakeClick: Function\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        maxWidth: '60%',\r\n        margin: 'auto',\r\n    },\r\n    media: {\r\n        height: 0,\r\n        paddingTop: '56.25%', // 16:9\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1)\r\n    }\r\n}));\r\n\r\nconst Result: React.FC<IProps> = (props: IProps) => {\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Card className={classes.card}>\r\n                <CardMedia\r\n                    className={classes.media}\r\n                    image={`img/${props.result.imgSrc}`}\r\n                    title=\"Result image\"\r\n                 />\r\n                <CardContent>\r\n                    <Typography variant=\"h5\" component=\"h2\">\r\n                        {props.result.text}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                        {props.result.description}\r\n                    </Typography>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        size=\"large\"\r\n                        className={classes.button}\r\n                        onClick={() => props.onRetakeClick()}\r\n\r\n                    >\r\n                        Retake Quiz\r\n                    </Button>\r\n                </CardContent>\r\n        </Card>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: any) => {\r\n    const results = [...state.quiz.quiz.results];\r\n    let result;\r\n    const totalValue = state.value.value;\r\n    for (let i = 0; i <= results.length - 1; i++) {\r\n        if(results[i].lowValue <= totalValue && results[i].highValue >= totalValue){\r\n            result = {...results[i]};\r\n            break;\r\n        }\r\n    }\r\n    return {\r\n        result: {...result}\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n    onRetakeClick: () => {\r\n        dispatch({type: '[QUIZ] RESET_QUESTION_NUM'});\r\n        dispatch({type: '[QUIZ] QUIZ_END', payload: false});\r\n        dispatch({type: '[VALUE] RESET_VALUE'});\r\n    }\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Result);\r\n\r\n","import React, {useEffect} from 'react';\r\nimport Questions from '../../components/Questions';\r\nimport Header from '../../components/Header';\r\n// import gotLogo from '../../assets/got.jpg';\r\n// import friendsLogo from '../../assets/friends.jpg';\r\n// import svLogo from '../../assets/sv.png';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport {connect} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\nimport Result from \"../Result/Result\";\r\nimport {IQuiz} from \"../../models/IQuiz\";\r\n\r\ninterface IProps {\r\n    quizType: string,\r\n    quizStart: boolean,\r\n    quizEnd: boolean,\r\n    currentQuestion: number,\r\n    lastQuestion: number,\r\n    quiz: IQuiz,\r\n    onStartClick: Function,\r\n    resetQuizData: Function,\r\n    updateQuizType: Function,\r\n    updateNavTab: Function\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    card: {\r\n        maxWidth: '60%',\r\n        margin: 'auto'\r\n    },\r\n    media: {\r\n        width: '100%',\r\n        height: '400px',\r\n    },\r\n    button: {\r\n        margin: theme.spacing(1),\r\n    }\r\n}));\r\n\r\nconst Quiz: React.FC<IProps> = (props: IProps) => {\r\n\r\n    useEffect(() => {\r\n        const path = window.location.pathname;\r\n        const quizTypeByPath = getQuizTypeByPath(path);\r\n        const navTabByPath = getNavTabByPath(path);\r\n        props.updateNavTab(navTabByPath);\r\n\r\n        // condition that take care of the case that the user click back or forward, or change url manually\r\n        if (quizTypeByPath !== props.quizType) {\r\n            props.updateQuizType(quizTypeByPath);\r\n            props.resetQuizData();\r\n        }\r\n\r\n        // case user change quiz and immediately refresh page and the prev quiz data didn't finished to reset\r\n        if (Object.getOwnPropertyNames(props.quiz).length > 0) {\r\n            if (props.quizType !== props.quiz.quizType) {\r\n                props.resetQuizData();\r\n            }\r\n        }\r\n    }, []);\r\n\r\n    const getQuizTypeByPath = (path: string) => {\r\n        switch (path) {\r\n            case '/gameOfThronesQuiz':\r\n                return 'Game Of Thrones';\r\n            case '/friendsQuiz':\r\n                return 'Friends';\r\n            case '/siliconValleyQuiz':\r\n                return 'Silicon Valley';\r\n        }\r\n    };\r\n\r\n    const getNavTabByPath = (path: string) => {\r\n        switch (path) {\r\n            case '/gameOfThronesQuiz':\r\n                return 1;\r\n            case '/friendsQuiz':\r\n                return 2;\r\n            case '/siliconValleyQuiz':\r\n                return 3;\r\n        }\r\n    };\r\n\r\n    const classes = useStyles();\r\n\r\n    const setImgSrc = () => {\r\n        switch (props.quizType) {\r\n            case 'Game Of Thrones':\r\n                return 'https://www.youtube.com/embed/TZE9gVF1QbA';\r\n            case 'Friends':\r\n                return 'https://www.youtube.com/embed/TgP8v60X23c';\r\n            case 'Silicon Valley':\r\n                return 'https://www.youtube.com/embed/4eMYiDaY3-Q';\r\n        }\r\n    };\r\n\r\n    if (props.quizEnd) {\r\n        return (\r\n            <div>\r\n                <Header/>\r\n                <Result/>\r\n            </div>\r\n        );\r\n    }\r\n    if (props.quizStart) {\r\n        return (\r\n            <div>\r\n                <Header/>\r\n                <Questions/>\r\n            </div>\r\n        );\r\n    }\r\n    return (\r\n        <div>\r\n            <Header/>\r\n            <Card className={classes.card}>\r\n                <CardMedia\r\n                    className={classes.media}\r\n                    image={setImgSrc()}\r\n                    component=\"iframe\"\r\n                    src=\"Show opening\"\r\n                />\r\n                <CardContent>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        size=\"large\"\r\n                        className={classes.button}\r\n                        onClick={() => props.onStartClick(props.quizType)}>\r\n                        Let's Start Quiz\r\n                    </Button>\r\n                </CardContent>\r\n            </Card>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state: any) => {\r\n    const quiz = state.quiz.quiz;\r\n    const quizType = state.quiz.quizType;\r\n    const quizStart = state.quiz.quizStart;\r\n    const currentQuestion = state.quiz.currentQuestion;\r\n    const lastQuestion = state.quiz.lastQuestion;\r\n    const quizEnd = state.quiz.quizEnd;\r\n    return {\r\n        quizType: quizType,\r\n        quizStart: quizStart,\r\n        currentQuestion: currentQuestion,\r\n        lastQuestion: lastQuestion,\r\n        quizEnd: quizEnd,\r\n        quiz: quiz\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n    onStartClick: (quizType: string) => {\r\n        dispatch({type: '[QUIZ] QUIZ_START', payload: true});\r\n        switch (quizType) {\r\n            case 'Game Of Thrones':\r\n                dispatch({type: '[QUIZZES API] GET_GOT_QUIZ'});\r\n                break;\r\n            case 'Friends':\r\n                dispatch({type: '[QUIZZES API] GET_FRIENDS_QUIZ'});\r\n                break;\r\n            case 'Silicon Valley':\r\n                dispatch({type: '[QUIZZES API] GET_SV_QUIZ'});\r\n                break;\r\n        }\r\n    },\r\n    updateQuizType: (quizType: string) => {\r\n        dispatch({type: '[QUIZ] UPDATE_QUIZ_TYPE', payload: quizType});\r\n\r\n    },\r\n    updateNavTab: (value: number) => {\r\n        dispatch({type: '[NAV TAB] UPDATE_NAV_TAB', payload: value});\r\n    },\r\n    resetQuizData: () => {\r\n        dispatch({type: '[QUIZ] RESET_LAST_QUESTION'});\r\n        dispatch({type: '[QUIZ] QUIZ_START', payload: false});\r\n        dispatch({type: '[QUIZ] RESET_QUESTION_NUM'});\r\n        dispatch({type: '[QUIZ] QUIZ_END', payload: false});\r\n        dispatch({type: '[VALUE] RESET_VALUE'});\r\n        dispatch({type: '[QUIZ] RESET_QUIZ'});\r\n    }\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Quiz);\r\n","import React, {useState} from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport gotLogo from '../assets/got.jpg';\r\nimport friendsLogo from '../assets/friends.jpg';\r\nimport svLogo from '../assets/sv.png';\r\n\r\ninterface IProps {\r\n    tvShow: string;\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n    media: {\r\n        height: 140,\r\n    }\r\n});\r\n\r\nconst TvShowCard: React.FC<IProps> = (props: IProps) => {\r\n    const classes = useStyles();\r\n    const [redirect, setRedirect] = useState(false);\r\n\r\n    const getRoutePath = () => {\r\n        switch (props.tvShow) {\r\n            case 'Game Of Thrones':\r\n                return '/gameOfThronesQuiz';\r\n            case 'Friends':\r\n                return '/friendsQuiz';\r\n            case 'Silicon Valley':\r\n                return '/siliconValleyQuiz';\r\n            default:\r\n                return '/'\r\n        }\r\n    };\r\n\r\n    const getDescription = () => {\r\n        switch (props.tvShow) {\r\n            case 'Game Of Thrones':\r\n                return 'Nine noble families fight for control over the mythical lands of Westeros, while an ancient enemy returns after being dormant for thousands of years.';\r\n            case 'Friends':\r\n                return 'Follows the personal and professional lives of six twenty to thirty-something-year-old friends living in Manhattan.';\r\n            case 'Silicon Valley':\r\n                return 'Follows the struggle of Richard Hendricks, a Silicon Valley engineer trying to build his own company called Pied Piper.';\r\n            default:\r\n                return ''\r\n        }\r\n    };\r\n\r\n    const getImgSrc = () => {\r\n        switch (props.tvShow) {\r\n            case 'Game Of Thrones':\r\n                return gotLogo;\r\n            case 'Friends':\r\n                return friendsLogo;\r\n            case 'Silicon Valley':\r\n                return svLogo;\r\n            default:\r\n                return ''\r\n        }\r\n    };\r\n\r\n    const getWikiUrl = () => {\r\n        switch (props.tvShow) {\r\n            case 'Game Of Thrones':\r\n                return 'https://en.wikipedia.org/wiki/Game_of_Thrones';\r\n            case 'Friends':\r\n                return 'https://en.wikipedia.org/wiki/Friends';\r\n            case 'Silicon Valley':\r\n                return 'https://en.wikipedia.org/wiki/Silicon_Valley_(TV_series)';\r\n            default:\r\n                return 'https://en.wikipedia.org'\r\n        }\r\n    };\r\n\r\n    const getFamousShowQuote = () => {\r\n        switch (props.tvShow) {\r\n            case 'Game Of Thrones':\r\n                return 'Winter Is Coming';\r\n            case 'Friends':\r\n                return 'How you doin’?';\r\n            case 'Silicon Valley':\r\n                return 'This Guy F*uks';\r\n            default:\r\n                return ''\r\n        }\r\n    };\r\n\r\n    if (redirect) {\r\n        return <Redirect to={getRoutePath()}/>\r\n    }\r\n    return (\r\n        <Card>\r\n            <CardActionArea onClick={() => setRedirect(true)}>\r\n                <CardMedia\r\n                    className={classes.media}\r\n                    src=\"img\"\r\n                    image={getImgSrc()}\r\n                    title={getFamousShowQuote()}\r\n                />\r\n                <CardContent>\r\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                        {props.tvShow}\r\n                    </Typography>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n                        {getDescription()}\r\n                    </Typography>\r\n                </CardContent>\r\n            </CardActionArea>\r\n            <CardActions>\r\n                <Button\r\n                    size=\"small\"\r\n                    color=\"primary\"\r\n                    onClick={() => window.open(getWikiUrl())}>\r\n                    Learn More About The Show\r\n                </Button>\r\n            </CardActions>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default TvShowCard;","import React, {useEffect} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\nimport TvShowCard from '../../components/TvShowCard';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\ninterface IProps {\r\n    resetQuizData: Function,\r\n    updateQuizType: Function,\r\n    updateNavTab: Function\r\n}\r\n\r\nconst Home: React.FC<IProps> = (props: IProps) => {\r\n\r\n    useEffect(() => {\r\n        // those functions is needed in case user clicked back or forward, or changed the url manually\r\n        props.updateNavTab(0);\r\n        props.updateQuizType('');\r\n        props.resetQuizData();\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <h1>\r\n                Welcome to WHICH CHARACTER ARE YOU APP!\r\n            </h1>\r\n            <h2>\r\n                Click on one of the tv shows' cards to start a quiz to see WHICH CHARACTER ARE YOU:\r\n            </h2>\r\n            <Grid\r\n                container\r\n                direction=\"row\"\r\n                justify=\"space-around\"\r\n                alignItems=\"center\">\r\n                <Grid item xs={3}>\r\n                    <TvShowCard tvShow=\"Game Of Thrones\"/>\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                    <TvShowCard tvShow=\"Friends\"/>\r\n                </Grid>\r\n                <Grid item xs={3}>\r\n                    <TvShowCard tvShow=\"Silicon Valley\"/>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n    updateQuizType: (quizType: string) => {\r\n        dispatch({type: '[QUIZ] UPDATE_QUIZ_TYPE', payload: quizType});\r\n    },\r\n    updateNavTab: (value: number) => {\r\n        dispatch({type: '[NAV TAB] UPDATE_NAV_TAB', payload: value});\r\n    },\r\n    resetQuizData: () => {\r\n        dispatch({type: '[QUIZ] RESET_LAST_QUESTION'});\r\n        dispatch({type: '[QUIZ] QUIZ_START', payload: false});\r\n        dispatch({type: '[QUIZ] RESET_QUESTION_NUM'});\r\n        dispatch({type: '[QUIZ] QUIZ_END', payload: false});\r\n        dispatch({type: '[VALUE] RESET_VALUE'});\r\n        dispatch({type: '[QUIZ] RESET_QUIZ'});\r\n    }\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(Home);\r\n","import React from 'react';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport {Route, Link} from \"react-router-dom\";\r\nimport Quiz from '../pages/Quiz/Quiz';\r\nimport Home from '../pages/Home/Home';\r\nimport {connect} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\nimport InvertColors from '@material-ui/icons/InvertColors';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\ninterface IProps {\r\n    currentNavTab: number,\r\n    themeType: string,\r\n    onQuizClick: Function,\r\n    onIconClick: Function\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    icon: {\r\n        marginTop: theme.spacing(1),\r\n        fontSize: 32,\r\n        marginLeft: 'auto',\r\n        marginRight: theme.spacing(10),\r\n        cursor: 'pointer'\r\n    },\r\n}));\r\n\r\nconst NavBar: React.FC<IProps> = (props: IProps) => {\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div>\r\n            <Paper>\r\n                <Grid className={classes.root} container spacing={0}>\r\n                    <Grid item xs={10}>\r\n                        <Tabs\r\n                            value={props.currentNavTab}\r\n                            indicatorColor=\"primary\"\r\n                            textColor=\"primary\"\r\n                        >\r\n                            <Tab\r\n                                label=\"Home\"\r\n                                component={Link}\r\n                                to=\"/\"\r\n                                onClick={() => props.onQuizClick('')}\r\n                            />\r\n                            <Tab\r\n                                label=\"Game Of Thrones Quiz\"\r\n                                component={Link}\r\n                                to=\"/gameOfThronesQuiz\"\r\n                                onClick={() => props.onQuizClick('Game Of Thrones')}\r\n                            />\r\n                            <Tab\r\n                                label=\"Friends Quiz\"\r\n                                component={Link}\r\n                                to=\"/friendsQuiz\"\r\n                                onClick={() => props.onQuizClick('Friends')}\r\n                            />\r\n                            <Tab\r\n                                label=\"Silicon Valley Quiz\"\r\n                                component={Link}\r\n                                to=\"/siliconValleyQuiz\"\r\n                                onClick={() => props.onQuizClick('Silicon Valley')}\r\n                            />\r\n                        </Tabs>\r\n                    </Grid>\r\n                    <Grid item xs={2}>\r\n                        <Tooltip title=\"Toggle light/dark theme\">\r\n                                <InvertColors\r\n                                    className={classes.icon}\r\n                                    onClick={() => props.onIconClick(props.themeType)}\r\n                                />\r\n                        </Tooltip>\r\n                    </Grid>\r\n                </Grid>\r\n            </Paper>\r\n            <Route exact path=\"/\" component={Home}/>\r\n            <Route path=\"/gameOfThronesQuiz\" component={Quiz}/>\r\n            <Route path=\"/friendsQuiz\" component={Quiz}/>\r\n            <Route path=\"/siliconValleyQuiz\" component={Quiz}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\r\n    onQuizClick: (quizType: string) => {\r\n        dispatch({type: '[QUIZ] UPDATE_QUIZ_TYPE', payload: quizType});\r\n        dispatch({type: '[QUIZ] RESET_LAST_QUESTION'});\r\n        dispatch({type: '[QUIZ] QUIZ_START', payload: false});\r\n        dispatch({type: '[QUIZ] RESET_QUESTION_NUM'});\r\n        dispatch({type: '[QUIZ] QUIZ_END', payload: false});\r\n        dispatch({type: '[VALUE] RESET_VALUE'});\r\n        dispatch({type: '[QUIZ] RESET_QUIZ'});\r\n    },\r\n    onIconClick: (themeType: string) => {\r\n        let newThemeType = '';\r\n        switch (themeType) {\r\n            case 'dark':\r\n                newThemeType = 'light';\r\n                break;\r\n            case 'light':\r\n                newThemeType = 'dark';\r\n                break;\r\n        }\r\n        console.log(newThemeType);\r\n        dispatch({type: '[THEME TYPE] UPDATE_THEME_TYPE', payload: newThemeType});\r\n    }\r\n});\r\n\r\nconst mapStateToProps = (state: any) => {\r\n    const currentNavTab = state.navTab.currentNavTab;\r\n    const themeType = state.theme.themeType;\r\n    return {\r\n        currentNavTab: currentNavTab,\r\n        themeType: themeType\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NavBar);\r\n","import React from 'react';\nimport './App.css';\nimport NavBar from '../../components/NavBar';\nimport {createMuiTheme} from \"@material-ui/core\";\nimport {ThemeProvider} from '@material-ui/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport {connect} from \"react-redux\";\n\ninterface IProps {\n    themeType: string\n}\n\nexport const App: React.FC<IProps> = (props: IProps) => {\n\n    const setTheme = () => {\n        let theme;\n        switch (props.themeType) {\n            case 'dark':\n                theme = createMuiTheme({\n                    palette: {\n                        type: 'dark', // Switching the dark mode on is a single property value change.\n                        primary: {\n                            main: '#64b5f6',\n                        },\n                    },\n                });\n                break;\n            case 'light':\n                theme = createMuiTheme({\n                    palette: {\n                        type: 'light', // Switching the dark mode on is a single property value change.\n                        primary: {\n                            main: '#3f51b5',\n                        },\n                    },\n                });\n                break;\n        }\n        return theme;\n    };\n\n    return (\n        <ThemeProvider theme={setTheme()}>\n            <CssBaseline/>\n            <div className=\"App\">\n                <NavBar/>\n            </div>\n        </ThemeProvider>\n    );\n};\n\nconst mapStateToProps = (state: any) => {\n    const themeType = state.theme.themeType;\n    return {\n        themeType: themeType\n    }\n};\n\nexport default connect(mapStateToProps, null)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {Dispatch, Middleware, MiddlewareAPI} from 'redux';\r\n\r\nconst getQuizzesFlow: Middleware = ({dispatch}: MiddlewareAPI) => (next: Dispatch) => action => {\r\n    if (action.type === '[QUIZZES API] GET_GOT_QUIZ') {\r\n        fetchQuiz('data/gamesOfThronesQuiz.json',dispatch);\r\n    }\r\n    if(action.type === '[QUIZZES API] GET_FRIENDS_QUIZ'){\r\n        fetchQuiz('data/friendsQuiz.json',dispatch);\r\n    }\r\n    if(action.type === '[QUIZZES API] GET_SV_QUIZ'){\r\n        fetchQuiz('data/siliconValleyQuiz.json',dispatch);\r\n    }\r\n    return next(action);\r\n};\r\n\r\nconst fetchQuiz = (quizType: string, dispatch: Function) => {\r\n    fetch(quizType)\r\n        .then(res => res.json())\r\n        .then((data: any) => {\r\n            dispatch({type: '[QUIZ] SET_QUIZ', payload: {...data[0]}});\r\n        })\r\n        .catch((e) => {\r\n            console.error('Quiz Fetch failed', e)\r\n        })\r\n};\r\n\r\nexport const quizzesMdl = [getQuizzesFlow];\r\n","export const loadState = () => {\r\n    try {\r\n        const serializedState = localStorage.getItem('state');\r\n        if (serializedState === null) {\r\n            return undefined;\r\n        }\r\n        return JSON.parse(serializedState);\r\n    } catch (err) {\r\n        return undefined;\r\n    }\r\n};\r\n\r\nexport const saveState = (state: any) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        localStorage.setItem('state', serializedState);\r\n    } catch {\r\n        // ignore write errors\r\n    }\r\n};","import {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport {quizzesMdl} from './quizzes.api.middleware';\r\nimport {loadState} from '../localStorage/localStorage';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\n\r\nexport interface Action {\r\n    type: string;\r\n    payload: any;\r\n}\r\n\r\nconst navTabInitState = {\r\n    currentNavTab: 0\r\n};\r\n\r\nexport const navTabReducer = (state = navTabInitState, action: Action) => {\r\n    if (action.type === '[NAV TAB] UPDATE_NAV_TAB') {\r\n        return {\r\n            ...state,\r\n            currentNavTab: action.payload\r\n        };\r\n    } else {\r\n        return state;\r\n    }\r\n};\r\n\r\nconst quizInitState = {\r\n    quiz: {},\r\n    quizType: '',\r\n    currentQuestion: 0,\r\n    quizStart: false,\r\n    lastQuestion: 0,\r\n    quizEnd: false\r\n};\r\n\r\nexport const quizReducer = (state = quizInitState, action: Action) => {\r\n    switch (action.type) {\r\n        case '[QUIZ] SET_QUIZ':\r\n            return {\r\n                ...state,\r\n                quiz: {...action.payload}\r\n            };\r\n        case '[QUIZ] UPDATE_QUIZ_TYPE':\r\n            return {\r\n                ...state,\r\n                quizType: action.payload\r\n            };\r\n        case '[QUIZ] RESET_QUIZ':\r\n            return {\r\n                ...state,\r\n                quiz: {}\r\n            };\r\n        case '[QUIZ] ADVANCE_QUESTION_NUN':\r\n            return {\r\n                ...state,\r\n                currentQuestion: state.currentQuestion += 1,\r\n            };\r\n        case '[QUIZ] RESET_QUESTION_NUM':\r\n            return {\r\n                ...state,\r\n                currentQuestion: 0,\r\n            };\r\n        case '[QUIZ] QUIZ_START':\r\n            return {\r\n                ...state,\r\n                quizStart: action.payload,\r\n            };\r\n        case '[QUIZ] SET_LAST_QUESTION':\r\n            return {\r\n                ...state,\r\n                lastQuestion: action.payload,\r\n            };\r\n        case '[QUIZ] RESET_LAST_QUESTION':\r\n            return {\r\n                ...state,\r\n                lastQuestion: 0,\r\n            };\r\n        case '[QUIZ] QUIZ_END':\r\n            return {\r\n                ...state,\r\n                quizEnd: action.payload,\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst valueInitState = {\r\n    value: 0,\r\n};\r\n\r\nexport const valueReducer = (state = valueInitState, action: Action) => {\r\n    switch (action.type) {\r\n        case '[VALUE] UPDATE_VALUE':\r\n            return {\r\n                ...state,\r\n                value: state.value + action.payload\r\n            };\r\n        case '[VALUE] RESET_VALUE':\r\n            return  {\r\n                ...state,\r\n                value: 0\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst AppThemeTypeInitState = {\r\n    themeType: 'light' ,\r\n};\r\n\r\nexport const themeTypeReducer = (state = AppThemeTypeInitState, action: Action) => {\r\n    if (action.type === '[THEME TYPE] UPDATE_THEME_TYPE') {\r\n        return {\r\n            ...state,\r\n            themeType: action.payload\r\n        };\r\n    } else {\r\n        return state;\r\n    }\r\n};\r\n\r\nexport default function configureStore() {\r\n    const persistedState = loadState();\r\n    const middlewareEnhancer = applyMiddleware(...quizzesMdl);\r\n\r\n    const enhancers = [middlewareEnhancer]\r\n    const composedEnhancers = composeWithDevTools(...enhancers)\r\n\r\n    const rootReducer = combineReducers({\r\n        quiz: quizReducer,\r\n        value: valueReducer,\r\n        navTab: navTabReducer,\r\n        theme: themeTypeReducer\r\n    });\r\n\r\n    return createStore(rootReducer, persistedState, composedEnhancers);\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './pages/App/App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport configureStore from './store/configureStore';\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport {saveState} from './localStorage/localStorage';\nimport {throttle} from 'lodash';\n\nconst store = configureStore();\n\nstore.subscribe(throttle(() => {\n    saveState({\n        quiz: store.getState().quiz,\n        value: store.getState().value,\n        navTab: store.getState().navTab,\n        theme: store.getState().theme\n    });\n}, 1000));\n\nif (window.location.hostname.indexOf('localhost') > -1) {\n    // @ts-ignore\n    window['store'] = store;\n}\n\nReactDOM.render(\n    <Provider store={store}>\n        <Router>\n            <App/>\n        </Router>\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/got.2432dfb3.jpg\";","module.exports = __webpack_public_path__ + \"static/media/friends.688770de.jpg\";","module.exports = __webpack_public_path__ + \"static/media/sv.b768c2be.png\";"],"sourceRoot":""}